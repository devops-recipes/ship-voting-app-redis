jobs:
# jobs for the provision-gke-kubernetes-cluster app

  - name: build_frontend_image
    type: runSh
    steps:
      - IN: twotier_app_gitRepo
      - IN: gke_cliConfig
        switch: off
      - OUT: front_img
      - TASK:
        # invoke a script that provisions the GKE cluster named test-cluster
        - script: |
            pushd $TWOTIER_APP_GITREPO_PATH/gitRepo/vote
            docker build -t gcr.io/fair-future-183201/vote:master.$BUILD_NUMBER .
            gcloud docker -- push gcr.io/fair-future-183201/vote
            shipctl put_resource_state front_img "versionName" "gcr.io/fair-future-183201/vote:master.$BUILD_NUMBER"
            popd

  - name: deploy_test_cluster
    type: runSh
    steps:
      - IN: build_frontend_image
      - IN: twotier_app_gitRepo
      - IN: gke_cliConfig
      - IN: front_img
      - IN: back_img
      - IN: kube_cluster
      - IN: teststate
      - OUT: relstate
      - OUT: teststate
      - TASK:
        # invoke a script that provisions the GKE cluster named test-cluster
        - script: |
            pushd $TWOTIER_APP_GITREPO_PATH/gitRepo && ls -l

            shippable_replace ./twotierapp.yml.template ./release.template.yml
            cat release.template.yml
            relstate_location = shipctl get_resource_state relstate
            shipctl refresh_file_to_out_path release.template.yml relstate_location

            export VOTE_FRONT_LABEL_PARAM=${VOTE_FRONT_LABEL}
            export VOTE_BACK_LABEL_PARAM=${VOTE_BACK_LABEL}
            shippable_replace release.template.yml test_deploy_spec.yml
            cat test_deploy_spec.yml
            teststate_location = shipctl get_resource_state teststate
            shipctl refresh_file_to_out_path release.template teststate_location

            gcloud container clusters get-credentials $KUBE_CLUSTER_CLUSTERNAME --zone $KUBE_CLUSTER_REGION
            $response=kubectl create -f test_deploy_spec.yml
            echo "kubectl command response is "$response

            popd
