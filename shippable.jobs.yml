jobs:

  - name: build_image
    type: runSh
    steps:
      - IN: ship_voting_app_redis_gitRepo
      - IN: gke_cliConfig
      - OUT: front_img
      - TASK:
        # build the ship-vote image and push it to GCR
        - script: |
            pushd $(shipctl get_resource_state "ship_voting_app_redis_gitRepo")/ship-vote
              export IMG_TAG=master.$BUILD_NUMBER
              export IMG_REF=gcr.io/fair-future-183201/vote:$IMG_TAG
              docker build -t $IMG_REF .
              gcloud docker -- push $IMG_REF

              # Persist the image tag in the front_img resource so that the next stage
              # of the workflow knows which tag to deploy
              shipctl put_resource_state front_img "versionName" "$IMG_TAG"
            popd

  - name: deploy_test
    type: runSh
    steps:
      - IN: ship_voting_app_redis_gitRepo
        switch: off
      - IN: gke_cliConfig
      - IN: front_img
      - IN: test_params
      - IN: kube_cluster
      - OUT: relstate
      - OUT: teststate
      - TASK:
        # Create a Kubernetes deploy spec and service for the test environment for an existing cluster and deploy them
        - script: |
            pushd $(shipctl get_resource_state "ship_voting_app_redis_gitRepo")/kubernetes-manifests
              # Get the image tag from the front_img resource that we persisted earlier
              export FE_TAG=$(shipctl get_resource_version_name "front_img")

              # Save the image tag in the shared state resource relstate
              # so that we can also use it in the next stage for prod deployment.
              shipctl post_resource_state "relstate" "FE_TAG" $FE_TAG

              # Save the template file in the shared state resource relstate
              # so that we can also use it in the next stage for prod deployment.
              cp ./ship_vote_all_in_one_redis.yml.template ./release.template.yml
              shipctl refresh_file_to_out_path ./release.template.yml relstate

              # Replace the image and label placeholder values in our template
              cp ./ship_vote_all_in_one_redis.yml.template ./test_deploy_spec.yml
              shipctl replace ./test_deploy_spec.yml
              shipctl refresh_file_to_out_path ./test_deploy_spec.yml teststate

              # Init the kubeconfig file for the cluster since we are going to use kubectl
              gcloud container clusters get-credentials $KUBE_CLUSTER_POINTER_SOURCENAME --zone $KUBE_CLUSTER_POINTER_REGION

              # Delete previous deployments and services
              kubectl delete deployment $FE_LABEL 2>/dev/null || echo ""
              kubectl delete deployment $BE_LABEL 2>/dev/null || echo ""
              kubectl delete service $FE_LABEL 2>/dev/null || echo ""
              kubectl delete service $BE_LABEL 2>/dev/null || echo ""

              # Create the service and deployment object in the test environment
              kubectl create -o json -f ./test_deploy_spec.yml > kube_output.json
              cat kube_output.json
            popd

  - name: deploy_prod
    type: runSh
    steps:
      - IN: deploy_test
        switch: off
      - IN: gke_cliConfig
      - IN: prod_params
      - IN: kube_cluster
      - IN: relstate
      - OUT: prodstate
      - TASK:
        # Create a Kubernetes deploy spec and service for the Prod environment for an existing cluster and deploy them
        - script: |
            shipctl copy_resource_file_from_state relstate release.template.yml .
            cp ./release.template.yml ./prod_deploy_spec.yml
            export FE_TAG=$(eval echo "$"$(shipctl get_resource_version_key "relstate" "FE_TAG"))
            shipctl replace ./prod_deploy_spec.yml
            shipctl refresh_file_to_out_path ./prod_deploy_spec.yml prodstate

            # Init the kubeconfig file for the cluster since we are going to use kubectl
            gcloud container clusters get-credentials $KUBE_CLUSTER_POINTER_SOURCENAME --zone $KUBE_CLUSTER_POINTER_REGION

            # Delete previous deployments and services
            kubectl delete deployment $FE_LABEL 2>/dev/null || echo ""
            kubectl delete deployment $BE_LABEL 2>/dev/null || echo ""
            kubectl delete service $FE_LABEL 2>/dev/null || echo ""
            kubectl delete service $BE_LABEL 2>/dev/null || echo ""

            # Create the service and deployment object in the prod environment
            kubectl create -o json -f ./prod_deploy_spec.yml > kube_output.json
            cat kube_output.json
